x<-4
class()
<-class()
x.class()
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- 1:4
x <- 1:4
y <- 2:3
x+y
z <-x+y
class(z)
x <- c(3, 5, 1, 10, 12, 6)
x[x <= 5] <- 0
x
mate <- read.xlsx("getdata-data-DATA.gov_NGAP")
library(xlsx)
library(RODBC)
install.packages("C:/R/xlsxjars_0.6.1.zip", repos = NULL)
install.packages("C:/R/xlsx_0.5.7.zip", repos = NULL)
library(xlsx)
install.packages("C:/R/openxlsx_2.2.1.zip", repos = NULL)
library(xlsx)
install.packages("C:/R/openxlsx_2.4.0.tar.gz", repos = NULL, type = "source")
install.packages("xlsx")
library(xlsx)
colIndex<-18:23
rowIndex<-7:15
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx"
)
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1)
getdw()
getwd()
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
dat <-read.xlsx("./getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx")
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1)
colIndex<-18:23
rowIndex<-7:15
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,colIndex=colIndex,rowIndex=rowIndex)
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,rowIndex=rowIndex,colIndex=colIndex)
dat <-read.xlsx("getdata-data-DATA.gov_NGAP.xlsx",sheetIndex=1,HEADER=True,colIndex=colIndex,rowIndex=rowIndex)
res <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1)
RES
res
res <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1,1:2,2:4)
res <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1,TRUE,2:2,2:4)
res <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1,TRUE,17:18,2:4)
res
res <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1,TRUE,7:15,18:23)
res
dat <- read.xlsx("getdata-data-DATA.gov_NGAP.xlsx", 1,TRUE,7:15,18:23)
sum(dat$Zip*dat$Ext,na.rm=T)
xmlfile <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
library(xml)
install.packages("XML")
library("swirl")
install.packages("swirl")
library("swirl")
ls()
getwd()
load("C:/Users/Mate/Documents/.RData")
library("swirl")
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x
y<-x-3
y
getwd()
library(XML)
url <-"http://www.transitfms.co.za/"
html<-htmlTreeParse(url,userInternalNodes=T)
html<-htmlTreeParse(url,useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
ut=rl
url
ht =readLines(url);
ht =readLines(url)
pg2 =GET("http://httpbin.org/basic-auth/user/passwd")
library(httr)
pg2 =GET("http://httpbin.org/basic-auth/user/passwd")
pg2
pg2 =GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
names(pg2)
pag2 =GET("http://fleetfirstapi.azurewebsites.net/api/Login")
pag2
names(pag2)
pag2 =GET("http://fleetfirstapi.azurewebsites.net/api/Login/username/password")
names(pag2)
pag2
pag2 =GET("http://fleetfirstapi.azurewebsites.net/api/Login/username/password",authenticate("test","test"))
pag2
pag2 =GET("http://fleetfirstapi.azurewebsites.net/api/Asset")
pag2
json1 = content(pag2)
json2 =jsonlite::fromJSON(toJSON(json1))
install.packages("jSonarR")
library("jsonarR")
library("json")
library("jsonr")
json2 =jsonlite::fromJSON(toJSON(json1))
library("rjson")
install.packages("rjson")
install.packages("rjson")
json2 =jsonlite::fromJSON(toJSON(json1))
func -> get()
func -> get(){return "mm"}
func -> get(){return "mm";}
library("swirl")
swirl("Reproducible Research ")
swirl()
reset()
reset()
submit()
library(swirl)
swirl("Statistical Inference")
library(dplyr)
bye()
install_from_swirl("Statistical Inference")
install_from_swirl("Reproducible Research")
install_from_swirl("Regression Models")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Practical Machine Learning")
swirl("Statistical Inference")
Swirl()
library(swirl)
swirl()
This is an R M
install.packages("knitr")
sudo tlmgr update --self
library(ggplot2)
str(mpg)
qplot(displ,hwy,data =mpg)
str(maacs)
library(swirl)
swirl()
1
qnorm(.95)
swirl()
1
qnorm(.95)
qnorm(.95)
1
qnorm(.95)
bye()
Swirl()
swirl
swirl()
pt(2.5, 15, lower.tail=FALSE)
pt(2.5, 15, lower.tail=FALSE)
qnorm(.95)
Library(swirl)
library(swirl)
swirl
swirl()
1
swirl()
4
swirl()
library(swirl)
swirl()
6
swirl()
head(pValues)
sum(pValues < 0.05)
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
table(pValues2 < 0.05, trueStatus)
24/500
"table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)
"table(p.adjust(pValues2,method=\"bonferroni\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method=\"BH\") < 0.05, trueStatus)
"table(p.adjust(pValues2,method=\"BH\") < 0.05, trueStatus)"
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
library(swirl)
swirl()
3.5
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh,nh*B,replace=TRUE)
resam <- matrix(sam,B,nh)
meds <- apply(resam,1,median)
median(meds)-median(fh)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(.025,.975))
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts,group)
obs
mean(Bdata$count)-mean(Cdata$count)
sample(group)
"perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))"
mean(perms>obs)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms>obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 2 , sd=4, type = "one.sample",  alt = "one.sided")$power
power.t.test(n = 16, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, delta = 100 , sd=200, type = "one.sample",  alt = "one.sided")$n
power.t.test(power = .8, n=26, sd=1, type = "one.sample",  alt = "one.sided")$delta
power.t.test(power = .8, n=27, sd=1, type = "one.sample",  alt = "one.sided")$delta
1
2
.8
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)\
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
qnorm(.99)
pnorm(2)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,size=8,prob=.5,lower.tail=FALSE)
pbinom(7,size=8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
bye()
quit
quit()
library(swirl)
swirl()
mydf -
> read.csv(path2csv,stringsAsFactors=FALSE)
install.packages("shiny")
install.packages("rcharts")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("ropensci/plotly")
install.packages("usingR")
setwd("C:/Users/Mate/devpropart2")
library(slidify)
slidify('index.Rmd')
slidify('index.Rmd')
